{"version":3,"sources":["components/CategoryAdd.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","obj","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loadig","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIiBA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC5CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBa,SAAEP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWR,GAF/C,+DAGAS,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACtC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBACIC,IAAMf,EACNgB,IAAMN,IAEV,4BAAKA,QCLJO,EAAU,SAAC,GAAoB,IAAjBxB,EAAgB,EAAhBA,SAWvB,ECZwB,SAAEA,GAE1B,MAA0BR,mBAAU,CAChCoB,KAAM,GACNa,QAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAW,WAEPvB,EAASL,GACJ6B,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,QAAQ,SAGrB,CAAEzB,IAEE0B,EDNyBK,CAAc/B,GAAjCkB,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,OAErB,OACI,qCACI,6BAAMzB,IAGJyB,GAAU,mBAAGJ,UAAU,oCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAEkB,GAAF,OACR,cAAC,EAAD,eAESA,GADCA,EAAIhB,aEQvBiB,EA9BM,WAGjB,MAAsCzC,mBAAS,CAAE,cAAjD,mBAAQ0C,EAAR,KAAoB3C,EAApB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ2C,EAAWpB,KAAK,SAAAd,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,YCpBtCmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f45472d0.chunk.js","sourcesContent":["\n    import React, { useState } from 'react';\n    import PropTypes from 'prop-types';\n\n    export const CategoryAdd = ({ setCategories }) => {\n\n        const [inputValue, setInputValue] = useState('');\n\n        const handleInputValue = ( e ) => {\n            setInputValue( e.target.value );\n        };\n\n        const handleSubmit = ( e ) => {\n            e.preventDefault();\n            \n            if ( inputValue.trim().length > 2 ){\n                setCategories( category => [ inputValue, ...category ] );\n                setInputValue('');\n            }\n        };\n\n        return (\n            <form onSubmit={ handleSubmit }>\n                <input \n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={ handleInputValue }\n                />\n            </form>\n        )\n    }\n\n    CategoryAdd.propTypes = {\n        setCategories: PropTypes.func.isRequired\n    };\n","\n    export const getGifs = async( category ) => {\n             \n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=HbfLG24MZdnzj5qmhMGU750n89wk4YOK`;\n        const resp = await fetch( url );\n        const { data } = await resp.json();\n\n        const gifs = data.map( obj => {\n            return {\n                id: obj.id,\n                title: obj.title,\n                url: obj.images?.downsized_medium.url // Usamos la condición (?) para validar si las imágenes vienen, entonces se muestra la data. \n            }\n        });\n\n        return gifs;\n    };","    \n    import React from 'react'\n\n    export const GifGridItem = ( { id, title, url } ) => {\n        return (\n            <div className='card animate__animated animate__fadeInDown'>\n                <img\n                    src={ url }\n                    alt={ title }\n                />\n                <p>{ title }</p>\n            </div>\n        )\n    }\n","    \n    import React from 'react';\n    import { useFetchGifs } from '../hooks/useFetchGifs';\n    import { GifGridItem } from './GifGridItem';\n\n    export const GifGrid = ( { category } ) => {\n\n        /*const [images, setImages] = useState( [] );\n\n        /// El Hook 'UseEffect', permite ejecutar una única vez cuando el componente es renderizado por primera vez\n        useEffect( () => {\n            getGifs( category )\n                .then( setImages );// Sólo se coloca la referencia al el método porque la promesa y el método reciben un parámetro, entonces se omite\n        }, [ category ]);// Agregamos la 'categoría' para que si 'cambia', entonces ejecutamos nuevamente el Effect\n        */\n\n        const { data:images, loadig } = useFetchGifs( category ); // 'data:images', es la forma de renombrar una 'prop' cuando en el archivo local, queremos personalizar su nombre\n\n        return (\n            <>\n                <h2>{ category }</h2>\n\n                {/* { loadig ? <p>Cargando...</p> : null } //Ésta es la forma larga de evaluar dos condiciones  */}\n                { loadig && <p className='animate__animated animate__shakeX'>Cargando...</p> }\n                <div className='card-grid'>\n                    {\n                        images.map( ( img ) => (\n                            <GifGridItem\n                                key={ img.id }\n                                { ...img }\n                            />\n                        ))\n                    }\n                </div>\n            </>\n        )\n    }","\n    import { useEffect, useState } from \"react\"\n    import { getGifs } from \"../components/helpers/getGifs\";\n\n    export const useFetchGifs = ( category ) => {\n      \n        const [state, setState] = useState( {\n            data: [],\n            loadig: true\n        } );\n\n        useEffect( () => {\n\n            getGifs( category )\n                .then( imgs => {\n                    setState({\n                        data: imgs,\n                        loadig: false \n                    });\n                });\n        }, [ category ] )\n\n        return state;\n    }\n    ","\n    import React, { Fragment, useState } from 'react';\n    import { CategoryAdd } from './components/CategoryAdd';\n    import { GifGrid } from './components/GifGrid';\n    //import PropTypes from 'prop-types'\n\n    const GifExpertApp = () => {\n\n        //const categories = [ 'One Punch', 'Samurai X', 'Dragon Ball' ];\n        const [ categories, setCategories ] = useState([ 'One Punch' ]);\n\n        /*const handleAdd = () => {\n            \n            setCategories( [ ...categories, 'HunterXHunter' ] );\n            //setCategories( category => [ ...categories, 'HunterXHunter' ] );\n        };*/\n\n        return(\n            <>\n                <h2>GifExpertAps</h2>\n                <CategoryAdd setCategories={ setCategories }/>\n                <hr/>\n                <ol>\n                    {\n                        categories.map( category => (\n                            <GifGrid\n                                key={ category }\n                                category={ category }\n                            />\n                        ))\n                    }\n                </ol>\n            </>\n        );\n    };\n\n    export default GifExpertApp;\n    \n    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport 'animate.css';\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}